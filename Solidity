pragma solidity ^0.4.22;

contract Users{

    // records and receiverRecords to store the user's address, string and balance
    mapping(address => uint) records;
    mapping(string => address) receiverRecords;
    
    address cBddr = 0x72bA7d8E73Fe8EB666eA66babC8116A41bfb10e3;
    CommunicatorReceiver commR = new CommunicatorReceiver(cBddr);
    CommunicatorSend cSender = new CommunicatorSend(commR);

    constructor() public payable{
    }

    Sender sender = new Sender(cSender);
    Receiver receiver = new Receiver(commR);

    // Creating user and store them at the map
    function createUser(string name) payable public {
        records[msg.sender] = msg.value;
        receiverRecords[name] = msg.sender;
    }

    // Send balance to the receiver user
    function sendToB(address addr, uint balance, string recName) payable public{
        uint t = records[addr];
        // whether the sender user has enough balance
        require(t >= balance);
        
        //register the sender user to the sender contract
        sender.register(addr, t);
        sender.comToSend(recName, balance, addr);
        
        //update balance after transaction
        uint balAfter = sender.getBalance(addr); // sender user's new balance is getting from the what is store at the sender contract
        address reciverAd = receiverRecords[recName]; // receiver user's new balance is geting from the reciver contract
        records[addr] = balAfter;
        records[reciverAd] = receiver.getBalance(recName);
    }

    // Register the user to the Reciver contract
    function registerRec(address addr, string recName) payable public{
        receiver.register(addr, recName, records[addr]);
    }

    // Testing wheter the user's balance has been update
    function getBalance(address addr) public view returns(uint){
        return records[addr];
    }
    
}

contract Sender{
    // record map is store the user who is sending balance to other user 
    mapping(address => uint) record;
    CommunicatorSend comSend;

    // register the sender to the CommunicatorSend and set the original amount
    constructor(CommunicatorSend cSender) public payable {
        uint amounts = 100000000;
        cSender.registerAddress(address(this), amounts);
        comSend = cSender;
    }

    // Sender calling the CommunicatorSend's function to pass the balance to the CommunicatorSend
    function comToSend(string name, uint balance, address senderAd) payable public{
        comSend.requestSend(address(this), name, balance, senderAd);
    }
    
    // If the transaction success, update the user balance
    function onSends(uint balance, bool isSuccess, address senderAd) public{
        if(isSuccess){
            record[senderAd] = record[senderAd] - balance;
        }
    }
    
    //Get function to get the user's new balance
    function getBalance(address addr) public view returns(uint){
        return record[addr];
    }
    
     // register the user to the Sender contract
    function register(address a, uint balance) public{
        record[a] = balance;
    }

}

contract CommunicatorSend{
    //managedContracts map store Sender's address and balance
    mapping(address => uint) managedContracts;
    CommunicatorReceiver commR;

    constructor(CommunicatorReceiver cReceiver) public payable {
        commR = cReceiver;
    }

    //Call the CommunicatorReceiver to pass the balance to the Receiver
    function requestSend(address addr, string b, uint balance, address senderAd) payable public{
       // increase balance to the Sender, Sender pass the balance to the receiver
        managedContracts[addr] = managedContracts[addr] + balance; 
        // When the CommunicatorReceiver successfuly send the balance to the receiver
        // call the onSend function to return message
        if(commR.requestReceive(b, balance)){
            onSend(balance, addr, true, senderAd);
            balance = 0;
        }
    }

    // Send message to the Sender contract if transaction successed
    function onSend(uint balance, address addr, bool isSuccess, address senderAd) payable public{
        if(isSuccess){
           //bytes4 methodId = bytes4(keccak256("onSends(uint256,bool, address)"));
            //bool flag = a.call(methodId, balance, true, input);
            //if(flag)
        //    {
         //       managedContracts[a] = managedContracts[a] - balance;
          //  }
          // update the Sender's balance and call the Sender contract
          managedContracts[addr] = managedContracts[addr] - balance;
          Sender se = Sender(addr);
          se.onSends(balance,true,senderAd);
        }
    }
    
    //Regist the sender contract to the CommunicatorSend
    function registerAddress(address addr, uint balance) payable public{
        managedContracts[addr] = balance;
    }
}

contract CommunicatorReceiver{
    struct User{
        address addr;
        string name;
        uint amount;
    }
    // Reciver contract's address
    address public rr;
    
    mapping(string => User) contracts;
    address public comaddress;
   
    constructor(address input) public payable {
         comaddress = input;
    }

    // CommunicatorReceiver pass the balance to the Receiver
   function requestReceive(string b, uint balance) payable public returns(bool){
        // update reciever's balance
        contracts[b].amount = contracts[b].amount + balance;
        uint test = contracts[b].amount;
       // bytes4 methodId = bytes4(keccak256("onSend(uint256,address,bool,address)"));
        //if(comSender.call(methodId,balance, a, true, input)){
        Receiver re = Receiver(rr);
        re.updateBalance(b, test);
        return true;
    }
    
    //Registe reciever to the CommunicatorReceiver
    function registerAddress(address a, string reciver, uint balance, address recieverAd) public{
        User memory user = User(a, reciver, balance);
        contracts[reciver] = user;
        rr = recieverAd;
    }
    
}

contract Receiver{
    CommunicatorReceiver cb;

    constructor(CommunicatorReceiver commR) public payable {
        cb = commR;
    }
    
    //Store user's info
    mapping(string => address) receiverRecords;
    mapping(string => uint) reRecords;

    // put user's info to the map
    function register(address addr, string b, uint balance) payable public{
        receiverRecords[b] = addr;
        reRecords[b] = balance;
        cb.registerAddress(addr,b,balance,address(this));
    }
    
    function getBalance(string b) payable public returns(uint){
        return reRecords[b];
    }
    
    //update user's new balance after recive from CommunicatorReceiver
    function updateBalance(string b, uint balance) payable public{
        reRecords[b] = balance;
    }

}
